name: Auto Publish SDK

on:
  push:
    branches: [main, prod]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no actual publishing)'
        required: false
        default: false
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build package
        run: yarn build

      - name: Determine version and tag
        id: version
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            # For main branch - staging versions with run number
            BASE_VERSION=$(jq -r '.version' package.json)
            if [ "$BASE_VERSION" = "null" ]; then
              echo "Error: Could not read version from package.json"
              exit 1
            fi
            CLEAN_VERSION=$(echo "$BASE_VERSION" | sed 's/-.*$//')
            STAGING_VERSION="${CLEAN_VERSION}-staging.${{ github.run_number }}"
            echo "version=$STAGING_VERSION" >> $GITHUB_OUTPUT
            echo "tag=staging" >> $GITHUB_OUTPUT
            echo "description=Staging release from main branch" >> $GITHUB_OUTPUT
            echo "should_sync=false" >> $GITHUB_OUTPUT
          else
            # For prod branch - production versions
            # Use npm version command (official npm way to bump versions)
            NEW_VERSION=$(npm version patch --no-git-tag-version --silent)
            NEW_VERSION=${NEW_VERSION#v}  # Remove 'v' prefix if present
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "description=Production release" >> $GITHUB_OUTPUT
            echo "should_sync=true" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json version
        run: |
          jq --arg version "${{ steps.version.outputs.version }}" '.version = $version' package.json > package.json.tmp

          if ! jq empty package.json.tmp 4>/dev/null; then
            echo "Error: Generated invalid JSON"
            rm -f package.json.tmp
            exit 1
          fi

          mv package.json.tmp package.json

          echo "Updated package.json version to: $(jq -r '.version' package.json)"

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🔍 DRY RUN MODE: Would publish version ${{ steps.version.outputs.version }} with tag ${{ steps.version.outputs.tag }}"
            echo "📦 Package would be published to: https://www.npmjs.com/package/@d-id/client-sdk/v/${{ steps.version.outputs.version }}"
            echo "🏷️  NPM tag would be: ${{ steps.version.outputs.tag }}"
            echo "✅ Dry run completed successfully - no actual publishing occurred"
          else
            echo "🚀 Publishing version ${{ steps.version.outputs.version }} with tag ${{ steps.version.outputs.tag }}"
            npm publish --access public --tag ${{ steps.version.outputs.tag }}
            echo "✅ Successfully published to NPM"
          fi

      - name: Create Git tag for production
        if: github.ref_name == 'prod' && github.event.inputs.dry_run != 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Commit version bump (prod only)
        if: github.ref_name == 'prod' && github.event.inputs.dry_run != 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }} [skip ci]" || echo "No changes to commit"
          git push origin prod

      - name: Sync version back to main (prod only)
        if: github.ref_name == 'prod' && github.event.inputs.dry_run != 'true'
        env:
          GH_TOKEN: ${{ secrets.DEVOPS_TOKEN }}
        run: |
          # Fetch latest main
          git fetch origin main
          git checkout main
          git pull origin main

          jq --arg version "${{ steps.version.outputs.version }}" '.version = $version' package.json > package.json.tmp

          if ! jq empty package.json.tmp 4>/dev/null; then
            echo "Error: Generated invalid JSON"
            rm -f package.json.tmp
            exit 1
          fi

          mv package.json.tmp package.json

          if git diff --quiet package.json; then
            echo "No version changes needed"
          else
            # Create a new branch for the version sync
            git checkout -b "chore/sync-version-${{ steps.version.outputs.version }}"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add package.json
            git commit -m "chore: sync version ${{ steps.version.outputs.version }} from prod [skip ci]"
            git push origin "chore/sync-version-${{ steps.version.outputs.version }}"

            # Create pull request to merge the version sync
            gh pr create \
              --repo de-id/agents-sdk \
              --title "chore: sync version ${{ steps.version.outputs.version }} from prod" \
              --body "## Version Sync

            This PR syncs the version number from the production release back to the main branch.

            ### Changes
            - Updated version from previous version to ${{ steps.version.outputs.version }}

            ### Related
            - Production Release: [v${{ steps.version.outputs.version }}](https://github.com/d-id/agents-sdk/releases/tag/v${{ steps.version.outputs.version }})
            - NPM Package: [@d-id/client-sdk@${{ steps.version.outputs.version }}](https://www.npmjs.com/package/@d-id/client-sdk/v/${{ steps.version.outputs.version }})

            ### Next Steps
            - [ ] Review the changes
            - [ ] Merge when ready" \
              --base main \
              --head "chore/sync-version-${{ steps.version.outputs.version }}" \
              --label "dependencies"
          fi

      - name: Create GitHub Release (prod only)
        if: github.ref_name == 'prod' && github.event.inputs.dry_run != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Release v${{ steps.version.outputs.version }}

            **Published to NPM:** [@d-id/client-sdk@${{ steps.version.outputs.version }}](https://www.npmjs.com/package/@d-id/client-sdk/v/${{ steps.version.outputs.version }})

            ### Installation
            ```bash
            npm install @d-id/client-sdk@${{ steps.version.outputs.version }}
            ```

            ${{ steps.version.outputs.description }}
          draft: false
          prerelease: false

      - name: Checkout agents-ui repository
        if: github.ref_name == 'prod' && github.event.inputs.dry_run != 'true'
        uses: actions/checkout@v4
        with:
          repository: de-id/agents-ui
          token: ${{ secrets.DEVOPS_TOKEN }}
          path: agents-ui

      - name: Update SDK version and create PR
        if: github.ref_name == 'prod' && github.event.inputs.dry_run != 'true'
        env:
          GH_TOKEN: ${{ secrets.DEVOPS_TOKEN }}
        run: |
          cd agents-ui

          jq --arg version "${{ steps.version.outputs.version }}" '.dependencies."@d-id/client-sdk" = $version' package.json > package.json.tmp
          mv package.json.tmp package.json

          if git diff --quiet package.json; then
            echo "No version changes needed in agents-ui"
            exit 0
          fi

          git checkout -b "chore/bump-sdk-version-${{ steps.version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: bump @d-id/client-sdk to v${{ steps.version.outputs.version }}"
          git push origin "chore/bump-sdk-version-${{ steps.version.outputs.version }}"

          gh pr create \
            --repo de-id/agents-ui \
            --title "chore: bump @d-id/client-sdk to v${{ steps.version.outputs.version }}" \
            --body "## SDK Version Update

          This PR updates the @d-id/client-sdk dependency to version ${{ steps.version.outputs.version }}.

          ### Changes
          - Updated @d-id/client-sdk from previous version to v${{ steps.version.outputs.version }}

          ### Related
          - SDK Release: [v${{ steps.version.outputs.version }}](https://github.com/d-id/agents-sdk/releases/tag/v${{ steps.version.outputs.version }})
          - NPM Package: [@d-id/client-sdk@${{ steps.version.outputs.version }}](https://www.npmjs.com/package/@d-id/client-sdk/v/${{ steps.version.outputs.version }})

          ### Next Steps
          - [ ] Review the changes
          - [ ] Run tests to ensure compatibility
          - [ ] Merge when ready" \
            --base main \
            --head "chore/bump-sdk-version-${{ steps.version.outputs.version }}" \
            --label "dependencies"
